buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

subprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'java'

    // when updating this version number, also update the version number in SpongeJSONAPI
    version = '0.1-SNAPSHOT'
    archivesBaseName = "$rootProject.name-$project.name"

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    task sourcesJar(type: Jar) {
        from sourceSets.main.java.srcDirs
        classifier = 'src'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc.options {
        links 'http://docs.oracle.com/javase/8/docs/api/'
    }

    compileJava.options.compilerArgs.add '-parameters'
    compileTestJava.options.compilerArgs.add '-parameters'
}

configure(subprojects.findAll { it.name == 'spigot' || it.name == 'sponge' }) {
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        fatJar
        compile.extendsFrom fatJar
    }

    dependencies {
        fatJar project(':common')
    }

    shadowJar {
        configurations = [project.configurations.fatJar]

        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude 'META-INF/MANIFEST.MF'
        exclude 'about.html'

        relocate 'javax.servlet', 'com.koenv.jsonapi.thirdparty.javax.servlet'
        relocate 'org.eclipse.jetty', 'com.koenv.jsonapi.thirdparty.org.eclipse.jetty'
        relocate 'spark', 'com.koenv.jsonapi.thirdparty.spark'
        relocate 'org.jetbrains.annotations', 'com.koenv.jsonapi.thirdparty.org.jetbrains.annotations'
        relocate 'org.intellij.lang.annotations', 'com.koenv.jsonapi.thirdparty.org.intellij.lang.annotations'
    }

    task dist() {
        dependsOn javadocJar
        dependsOn sourcesJar
        dependsOn shadowJar
    }
}

task dist() {
    dependsOn 'docgenerator:generateDoc'
}

task clean() {
    delete buildDir
}